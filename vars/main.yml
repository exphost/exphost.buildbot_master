buildbot_default_macros: |
  {% raw %}
  {% macro cs_common_git(cs) -%}
  c['change_source'].append(changes.GitPoller(
                            "{{cs.repo}}",
                            workdir='{{cs.workdir}}', branches={{cs.branches}},
                            pollInterval={{cs.pollInterval}},
                            project="{{cs.project}}",
                            buildPushesWithNoCommits=True,
                            pollAtLaunch=True
                            ))
  {%- endmacro %}
  
  {% macro cs_common_gerrit(cs) -%}
  c['change_source'].append(changes.GerritChangeSource(
                            gerritserver="{{cs.gerritserver}}",
                            gerritport={{cs.gerritport}},
                            username="{{cs.username}}",
                            handled_events={{cs.handled_events}}))
  {%- endmacro %}
  
  {% macro s_common_any_gerrit_branch(s) -%}
  c['schedulers'].append(schedulers.AnyBranchScheduler(
                         name="{{s.name}}",
                         change_filter=util.GerritChangeFilter(eventtype="patchset-created", project="{{s.project}}"),
                         treeStableTimer=1,
                         builderNames={{s.builderNames}}))
  {%- endmacro %}
  
  {% macro s_common_single_git_branch(s) -%}
  c['schedulers'].append(schedulers.SingleBranchScheduler(
                         name="{{s.name}}",
                         change_filter=util.ChangeFilter(project=['{{s.project}}',], branch='{{s.branch}}'),
                         treeStableTimer=1,
                         builderNames={{s.builderNames}}))
  {%- endmacro %}
  
  {% macro s_common_force_build(s) -%}
  c['schedulers'].append(schedulers.ForceScheduler(
                         name="{{s.name}}",
                         buttonName="Force build",
                         builderNames={{s.builderNames}},
                         codebases=[
                           util.CodebaseParameter(
                             "",
                             label="main repo",
                             branch=util.ChoiceStringParameter(
                               name="branch",
                               choices={{s.branches}},
                               default="{{s.branches[0]}}"
                             ),
                             revision=util.FixedParameter(name="revision", default=""),
                             repository=util.FixedParameter(name="repository", default=""),
                             project=util.FixedParameter(name="project", default=""),
                             ),
                           ],
                         reason=util.StringParameter(name="reason",
                           label="reason:",
                           required=True, size=80
                           )
                         ))
  {%- endmacro %}
  
  {% macro b_common_simple_spec(b) -%}
  factory = util.BuildFactory()
  factory.addStep(steps.RemoveDirectory(dir="build"))
  factory.addStep(steps.{{b.poller}}(repourl="{{b.repo}}", mode='incremental'))
  {%   for filename in b.filenames %}
  factory.addStep(steps.RpmBuild(specfile="SPEC/{{filename}}"))
  {%   endfor %}
  c['builders'].append(util.BuilderConfig(name="{{b.name}}",
                                          workernames=all_workers,
                                          factory=factory))
  {%- endmacro %}
  
  {% macro b_common_simple_spec_and_upload(b) -%}
  factory = util.BuildFactory()
  factory.addStep(steps.RemoveDirectory(dir="build"))
  factory.addStep(steps.{{b.poller}}(repourl="{{b.repo}}", mode='incremental'))
  {% for filename in b.filenames %}
  factory.addStep(steps.RpmBuild(specfile="SPEC/{{filename}}"))
  factory.addStep(steps.DirectoryUpload(workersrc="x86_64/",
                 masterdest="./rpms/{{b.package}}/"))
  factory.addStep(steps.MasterShellCommand(command="scp rpms/{{b.package}}/* {{b.upload_path}}"))
  {% endfor %}
  
  c['builders'].append(util.BuilderConfig(name="{{b.name}}",
                                          workernames=all_workers,
                                          factory=factory))
  {%- endmacro %}
  {% macro b_common_upload_rpm(b) -%}
  factory = util.BuildFactory()
  c['builders'].append(util.BuilderConfig(name="{{b.name}}",
                                          workernames=all_workers,
                                          factory=factory))
  {%- endmacro %}
  {% endraw %} 
