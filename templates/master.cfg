# -*- python -*-
# ex: set filetype=python:
import os

from buildbot.plugins import *
from buildbot.process import buildstep, logobserver
from twisted.internet import defer

{% import '.macros_helper.j2' as macros %}


c = BuildmasterConfig = {}
c['workers'] = []
{% for worker in hostvars|dict2items|find_buildbot_workers(app.key) | sort  %}
c['workers'].append(worker.Worker("{{worker}}", "{{app.value.buildbot_master.configs.pass}}"))
{% endfor %}
all_workers=["{{hostvars|dict2items|find_buildbot_workers(app.key)|sort|join('","')}}"]

c['protocols'] = {'pb': {'port': {{app.value.endpoints.pb.port}} }}

c['change_source'] = []
c['schedulers'] = []

c['builders'] = []
c['services'] = []

{{app.value.buildbot_master.configs.configuration.raw_pre|default("")}}


{% for cs in app.value.buildbot_master.configs.configuration.change_sources|default([]) +
             app.value.buildbot_master.configs.configuration.schedulers|default([]) +
             app.value.buildbot_master.configs.configuration.builders|default([]) +
             (app.value.buildbot_master.configs.configuration.complex|default({})).values()|flatten %}
{%   if macros[cs.type]|default(False) %}
{{ macros[cs.type](cs) }}
{%   else %}
# no macro with type {{cs.type}}
{%   endif %}
{% endfor %}


def gerritReviewCB(builderName, build, result, master, arg):
    if result == util.RETRY:
        return dict()

    message =  "Buildbot finished compiling your patchset\n"
    message += "on configuration: %s\n" % builderName
    message += "The result is: %s\n" % util.Results[result].upper()

    if arg:
        message += "\nFor more details visit:\n"
        message += build['url'] + "\n"

    if result == util.SUCCESS:
        verified = "1"
    else:
        verified = "-1"
    return dict(message=message, labels={'Code-Review': verified})

{{app.value.buildbot_master.configs.configuration.raw_post|default("")}}

c['title'] = "{{app.value.buildbot_master.configs.title}}"
{% if app.value.buildbot_master.configs.titleUrl|default(False) %}
c['titleURL'] = "{{app.value.buildbot_master.configs.titleUrl}}"
{% endif %}

c['buildbotURL'] = "{{app.value.endpoints.http.scheme}}://{{app.value.endpoints.http.address}}{% if app.value.endpoints.http.port not in [80, 443] %}:{{app.value.endpoints.http.port}}{% endif %}/"
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
